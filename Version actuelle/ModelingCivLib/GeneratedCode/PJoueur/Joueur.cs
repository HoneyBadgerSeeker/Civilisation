//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil
//     Les modifications apportées à ce fichier seront perdues si le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------
namespace PJoueur
{
    using PInterfaces_Fabrique_Abstraite;
    using PImplInfo;
    using PImplEii;
    using PCivilisation;
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Text;
    using PCase;

    public class Joueur
    {
        // liste des unites que le joueur possede
        public List<Unite> _liste_unite
        {
            get;
            set;
        }

        // nom du joueur
        public string _nomJoueur
        {
            get;
            set;
        }

        // fabrique unite
        public FabriqueUnite _fabrique
        {
            get;
            set;
        }

        // civilisation du joueur
        public Civilisation _civ
        {
            get;
            set;
        }

        // couleur du joueur
        public int _couleur
        {
            get;
            set;
        }

        // retourne si un directeur est present sur la case x y
        public bool contientDirecteur(int x, int y)
        {
            bool retour = false;
            foreach (Unite i in _liste_unite)
            {
                // case en question
                if (((i._posx_unite) == x) && ((i._posy_unite) == y))
                {
                    if (_civ is Info)
                    {
                        retour = i is DirecteurInfo;
                    }
                    else if (_civ is Eii)
                    {
                        retour = i is DirecteurEii;
                    }

                    // on sort si le directeur est present
                    if (retour)
                    {
                        break;
                    }
                }
            }
            return retour;

        }

        // constructeur de joueur
        public Joueur(string nomJoueur, Civilisation civ, int couleur)
        {
            _nomJoueur = nomJoueur;
            _liste_unite = new List<Unite>();
            _civ = civ;
            if (civ is Info) // Si la civilisation est une INFO on crée une FabriqueInfo et on l'ajoute au joueur
            {

                _fabrique = new FabriqueUniteInfo();
            }
            else
            {
                _fabrique = new FabriqueUniteEii();
            }
            _couleur = couleur;
        }

        // supprimer une unite
        public void supprimerUnite(Unite unit)
        {
            if (_liste_unite.Contains(unit))
            {
                _liste_unite.Remove(unit);
            }
        }

        // ajouter une unite
        public void ajouterUnite(Unite unit)
        {
            if (unit != null)
            {
                _liste_unite.Add(unit);
            }
        }

        // detruire une ville
        public void detruireVille(Ville ville)
        {
            _civ._villes.Remove(ville);
        }
    }
}

