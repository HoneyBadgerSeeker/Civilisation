//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil
//     Les modifications apportées à ce fichier seront perdues si le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------
namespace PCarte
{
    using PCivilisation;
	using System;
	using System.Collections.Generic;
	using System.Linq;
	using System.Text;
    using PCase;
    using Wrapper;

	public abstract class Carte
	{
        // retourne la taille de la carte
        public int getTaille()
        {
            return _taille;
        }

        // taille de la carte
        public int _taille
        {
            get;
            set;
        }

        // tableau des cases de la carte
        public Case[] _tabCases
        {
            get;
            set;
        }

        // tableau des cases de la carte
        public unsafe int* _tabInt
        {
            get;
            set;
        }

        // algo pour generation de la carte
        public Wrapper_Algo_carte _algo
        {
            get;
            set;
        }

        // retourne si les coordonnees de la case sont correctes
        public bool caseExiste(int x, int y)
        {
            return ((x >= 0) && (y >= 0) && (x < getTaille()) && (y < getTaille()));
        }

        // retourne la case correspondante a x et y
        public Case recupererCase(int x, int y)
        {
            if (caseExiste(x, y))
            {
                return _tabCases[x * getTaille() + y];
            }
            else
            {
                return null;
            }
        }

        // on ajoute les cases a la carte
        public unsafe void ajouterCases()  
        {
            for (int i = 0; i < _taille; i++)
            {
                for (int j = 0; j < _taille; j++)
                {
                    _tabCases[i * _taille + j] = FabriqueCase.INSTANCE.obtenirCase(_tabInt[i * _taille + j]);
                }
            }
        }

        // constructeur de carte
        public unsafe Carte(int taille, int nbjoueur)
		{
            _taille = taille;
            _tabCases = new Case[_taille * _taille];
            _algo = new Wrapper_Algo_carte(taille, nbjoueur);
            _tabInt = _algo.generationCarte();
            ajouterCases();
		}

	}
}

